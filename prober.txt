#!/usr/bin/python

import easysnmp
import sys
import time
import math
from easysnmp import Session
from easysnmp import snmp_walk
from easysnmp import snmp_get
from math import *
from easysnmp import exceptions


information = sys.argv[1]
agent = information.split(':')
agentipaddress = agent[0]
agentportnumber = agent[1]
agentcommunity = agent[2]
samplefrequency = float(sys.argv[2])
numberofsamples = int(sys.argv[3])
sampletime = 1/samplefrequency
emptyoids = []
a = []
b = []
#c = []


for oids in range(4,len(sys.argv)):
    emptyoids.append(sys.argv[oids])
emptyoids.insert(0,'1.3.6.1.2.1.1.3.0')

def probeanagent():#i will use function call method where for loop instance is create
    global a, timetick
    session = Session(hostname=agentipaddress,remote_port=agentportnumber,community='public',version=2,timeout=1,retries=1)
    '''an snmpget -v2c -c -Onvt command presence on terminal'''
    flag = session.get(emptyoids)
    b = []

    for addoids in range(1,len(flag)):
        if flag[addoids].value!='NOSUCHOBJECT' and flag[addoids].value!='NOSUCHINSTANCE':
            b.append(int(flag[addoids].value))


            if count!=0 and len(a)>0:#when count is not equal to zero there are samples that will be retreieved
                d = int(b[addoids-1]) - int(a[addoids-1])
                e = round(timetick1-timetick,1)#rounds to nearest decimal of 1
                f = int(d/e)
                if f < 0:
                    if flag[addoids].snmp_type == 'COUNTER32':#to handle 32 bit counters
                        d = d + 2**32
                        print(str(timetick1) + "|" + str(d/e) + "|")
                    elif flag[addoids].snmp_type == 'COUNTER64':#to handle 64 bit counters
                        d = d + 2**64
                        print(str(timetick1) + "|" + str(d/e) + "|")
                else:
                    print(str(timetick1) + "|" + str(f) + "|")#to handle all counters if no specific mentioned by agent
    a = b
    timetick = timetick1

if numberofsamples==-1:
    count = 0
    a = []
    while True:
        	timetick1 = time.time()#timetosleep
        	probeanagent()
        	timetick2 = time.time()
        	count = count + 1#a while count relation to run the process and end it normally
        	time.sleep(abs(sampletime - timetick2 + timetick1))#to get absolute value of time terminate
else:
	a = []
	for count in range(0,numberofsamples+1):#a for loop instance where 0 to n+1 samples being run 
        	timetick1 = time.time()
        	probeanagent()
        	timetick2 = time.time()
        	time.sleep(abs(sampletime - timetick2 + timetick1))
	
